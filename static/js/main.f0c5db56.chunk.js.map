{"version":3,"sources":["images/Atatürk.jpg","redux/actions/counteractions.js","redux/actions/actiontypes.js","components/Counter.js","components/Increaser.js","components/Decreaser.js","components/IncreaserByTwo.js","components/SecondPage.js","components/Navi.js","components/FirstCounterCard.js","components/LogInPage.js","App.js","serviceWorker.js","redux/reducers/initialState.js","redux/reducers/counterReducer.js","redux/reducers/usersNameReducer.js","redux/reducers/usersCityReducer.js","redux/reducers/loginReducer.js","redux/reducers/index.js","index.js","redux/reducers/configureStore.js"],"names":["module","exports","getDataFromAPIForName","dispatch","a","axios","get","response","result","data","console","log","type","payload","getUserCity","getDataFromAPIForCity","Counter","this","props","className","Row","counter","city","name","Component","mapDispatchToProps","connect","state","counterReducer","usersNameReducer","usersCityReducer","Increaser","Button","color","onClick","e","increment","parseInt","x","Decreaser","decrement","handleClick","IncreaserByTwo","increment_by_two","SecondPage","useState","newCity","setCity","newCities","useSelector","shallowEqual","getCountReducer","count","setCount","get_init","getInitialState","Dispatch","useDispatch","useEffect","Container","outline","href","withRouter","history","Navbar","light","expand","NavbarBrand","size","Nav","navbar","NavItem","NavLink","preventDefault","push","homepageChange","secondpageChange","FirstCounterCard","Card","style","width","heigth","CardImg","top","src","ata","alt","CardBody","CardTitle","CardSubtitle","CardText","LogInPage","changeRoute","setTimeout","isLogged","id","logIn","loginReducer","createBrowserHistory","App","exact","path","render","routeProps","Col","to","component","Boolean","window","location","hostname","match","initialState","action","newstate","map","user","address","allReducers","combineReducers","Store","createStore","applyMiddleware","thunk","getState","ReactDOM","store","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0c5db56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Atatürk.c2855dc2.jpg\";","import * as actiontypes from \"./actiontypes\"\r\nimport axios from \"axios\"\r\n\r\n\r\nexport const increment=(x)=>{\r\n    return {\r\n        type:actiontypes.INCREASE,\r\n        payload:x\r\n    }\r\n}\r\n\r\nexport const decrement=()=>{\r\n    return {\r\n        type:actiontypes.DECREASE,\r\n        payload:1\r\n    }\r\n}\r\n\r\nexport const increment_by_two=()=>{\r\n    return {\r\n        type:actiontypes.INCREASE_BY_TWO,\r\n        payload:2\r\n    }\r\n}\r\n\r\nexport const getData=(data)=>{\r\n    return {\r\n        type: actiontypes.GETDATA,\r\n        payload: data\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getDataFromAPIForName=()=>{\r\n    return async function (dispatch){\r\n           \r\n            const url=\"https://jsonplaceholder.typicode.com/users\";\r\n            const response= await axios.get(url);\r\n            const result=response.data;\r\n            console.log(result)\r\n            return dispatch(getData(result))\r\n        }\r\n    \r\n}\r\n\r\nexport const getUserCity=(data)=>{\r\n    return {\r\n        type: actiontypes.GETUSERCITY,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const getDataFromAPIForCity=()=>{\r\n    return async function (dispatch){\r\n           \r\n            const url=\"https://jsonplaceholder.typicode.com/users\";\r\n            const response= await axios.get(url);\r\n            const result=response.data;\r\n            console.log(result)\r\n            return dispatch(getUserCity(result))\r\n        }\r\n    \r\n}\r\n\r\nexport const logIn=()=>{\r\n    return {\r\n        type: actiontypes.LOGIN,\r\n        payload: true\r\n    }\r\n}\r\n\r\n\r\n\r\n","export const INCREASE=\"INCREASE\"\r\nexport const DECREASE=\"DECREASE\"\r\nexport const INCREASE_BY_TWO=\"INCREASE_BY_TWO\"\r\nexport const GETDATA=\"GETDATA\"\r\nexport const GETUSERCITY=\"GETUSERCITY\"\r\nexport const LOGIN=\"LOGIN\"\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Row } from \"reactstrap\";\r\nimport {getDataFromAPIForName} from \"../redux/actions/counteractions\";\r\n\r\n\r\n\r\n\r\nclass Counter extends Component {\r\n\r\n  \r\n\r\ncomponentDidMount(){\r\n      this.props.getDataFromAPIForName();\r\n}\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Counter\">\r\n        <Row className=\"Counter-h1-Row justify-content-center\">\r\n          <h1 className=\"Counter-h1\">Miktari arttir.</h1>\r\n        </Row>\r\n        <Row className=\"Counter-h2-Row justify-content-center\">\r\n          <h2>{this.props.counter}</h2>\r\n        </Row>\r\n        <Row className=\"Counter-h3-Row justify-content-center\">\r\n          <h4>{this.props.city}</h4>\r\n        </Row>\r\n        <Row>\r\n          <h4 className=\"Counter-h4-Row justify-content-center\">\r\n            {this.props.name}\r\n          </h4>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { counter: state.counterReducer,\r\n           name: state.usersNameReducer,\r\n           city: state.usersCityReducer\r\n}\r\n}\r\n\r\n\r\nconst mapDispatchToProps={\r\n   getDataFromAPIForName: getDataFromAPIForName\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\r\n","import React, { Component } from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport { increment } from '../redux/actions/counteractions'\r\nimport {Button} from \"reactstrap\"\r\n\r\nclass Increaser extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button color=\"success\" \r\n                onClick={(e)=>this.props.increment(parseInt(10))}\r\n                >10 Arttir</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps={increment:increment};\r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(Increaser)","import React, { Component } from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport { decrement} from '../redux/actions/counteractions'\r\nimport {Button} from \"reactstrap\"\r\n\r\n\r\n\r\nclass Decreaser extends Component {\r\n\r\n    //We could use this.props.decrement action directly in onClick event with writing {this.props.decrement} in it\r\n    //But in order to see different usages we will use it in a function\r\n    handleClick(){\r\n      return  this.props.decrement()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Button color=\"danger\" \r\n                onClick={()=>this.handleClick()}\r\n                >1 Azalt</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps={decrement};\r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(Decreaser)","import React, { Component } from 'react'\r\nimport {connect} from \"react-redux\"\r\nimport { increment_by_two, getUserCity, getDataFromAPIForCity } from '../redux/actions/counteractions'\r\nimport {Button} from \"reactstrap\"\r\nimport \"../cssfiles/IncreaserByTwo.css\"\r\n\r\n\r\nclass IncreaserByTwo extends Component {\r\n    render() {\r\n        return (\r\n          <div>\r\n            <Button color=\"dark\" onClick={()=>this.props.increment_by_two()}>\r\n              2 Arttir\r\n            </Button>\r\n            <span className=\"city\">\r\n              <Button\r\n                className=\"city-Button\"\r\n                color=\"warning\"\r\n                onClick={this.props.getDataFromAPIForCity}\r\n              >\r\n                Get City\r\n              </Button>\r\n            </span>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps={\r\n    increment_by_two: increment_by_two,\r\n    getUserCity: getUserCity,\r\n    getDataFromAPIForCity: getDataFromAPIForCity\r\n};\r\n\r\n\r\nexport default connect(null,mapDispatchToProps)(IncreaserByTwo)","import React from 'react'\r\nimport {Container, Row, Button} from \"reactstrap\"\r\nimport \"../cssfiles/SecondPage.css\"\r\nimport {useSelector, useDispatch, shallowEqual} from \"react-redux\"\r\nimport {useEffect, useState} from \"react\"\r\nimport {getDataFromAPIForCity, getDataFromAPIForName} from \"../redux/actions/counteractions\"\r\nimport {getInitialState} from \"../index\"\r\n\r\n\r\n\r\n\r\n//In this project, state management is being done with redux.\r\n//All files is being managed with redux\r\n//in the other files except SecondPage we have used mapStateToProps and mapDispatchToProps\r\n//Now in this page we will use hooks with redux intead of mapStateToProps and mapDispatchToProps\r\n//In order to implement hooks we import useSelector and useDispatch\r\n//Also with useEffect we will manage lifecyle so we won't write componenDidMount or compoenentDidUpdate\r\n\r\n\r\n\r\nconst SecondPage= () => {\r\n\r\n\r\n    //now we will create a state just for this SecondPage component and get new cities\r\n    //note that this state is not relevant with state in redux\r\n    //at the begining we will define an empty array in useState as an initial state\r\n    const [newCity, setCity]=useState([])\r\n    const newCities=[\"İzmir \" , \"Barcelona \", \"Budapest \", \"Vienna \", \"Madrid \", \"Valencia \", \"Rhodes \"];\r\n    function newCityClick () {\r\n        setCity(newCities)\r\n    }\r\n\r\n    \r\n\r\n    //shallowequal:\r\n    //In summary shallowequal checks the array in order to prevent unneccessary re-render\r\n    //In general redux store is not permanent, it has its own temproray memory \r\n    //unless we save our state in to local storage of browser, initialState will not change\r\n    //so we will get the changes form reducers like below:\r\n    const city=useSelector(state=>state.usersCityReducer, shallowEqual);\r\n    const name=useSelector(state=>state.usersNameReducer, shallowEqual );\r\n    //if we don't use redux, only use pure react we can reach the state as below:\r\n    // const city=useSelector(state=>state.state.apiCity, shallowEqual);\r\n    // const name=useSelector(state=>state.apiName, shallowEqual );\r\n    //Because of using redux our states are our reducers.\r\n    \r\n    //Now we will get counter value from  counterReducer and update it with useState to our newCount variable\r\n    //we could do that with using useDispatch and counter actions we wrote before like increment, decrement etc.\r\n    //But this time we will get the state from CounterReducer with useSelector and\r\n    //We will update the state via useState with any value that we will assign into a variable that we will name later as newCount.\r\n    const getCountReducer=useSelector(state=>state.counterReducer);\r\n    const [count, setCount]=useState(15)\r\n    const newCount=100;\r\n    function getNewCount(){\r\n          setCount(newCount);\r\n    }\r\n    \r\n\r\n\r\n    //Now we will get initialState. We have already imported getInitialState functon from store that exists in index.js\r\n    //We will assign this to a variable and use it in jsx\r\n    const get_init=getInitialState;\r\n\r\n\r\n\r\n\r\n    //With useDispatch we will be able to use actions of reducers directly\r\n    const Dispatch = useDispatch();\r\n    \r\n\r\n    //When SecondPage mounted useEffect will bring the names\r\n     useEffect(() => {\r\n     Dispatch(getDataFromAPIForName());\r\n     console.log(\"useeffect\");\r\n     },[Dispatch,newCity,getCountReducer])\r\n     //In order to understand useEffect function, pls revise the notes and videos in javascript react folder that exist in the PC\r\n    \r\n    //We will also use dispatch in a button to bring city names from api\r\n    // with wrapping getDataFromAPIForCity with dispatch in the button below\r\n\r\n    \r\n    \r\n    return (\r\n      <div>\r\n        <Container className=\"SecondPage-Container\">\r\n          <Row className=\"justify-content-center\">\r\n              <h1 className=\"SecondPage-h1\"> {count} {get_init.counterReducer} {getCountReducer} </h1>\r\n          </Row>\r\n          <Row className=\"justify-content-center\">\r\n            <p className=\"SecondPage-p\"> {newCity} </p>\r\n            <p className=\"SecondPage-p\"> {city} </p>\r\n            <p className=\"SecondPage-p\"> {name} </p>\r\n          </Row>\r\n          <div className=\"SecondPage-Button\">\r\n            <Button\r\n              outline\r\n              color=\"secondary\"\r\n              className=\"SecondPage-Button\"\r\n              href=\"http://localhost:3000/\"\r\n            >\r\n              Anasayfa\r\n            </Button>\r\n            <span className=\"SecondPage-Button-getcity\">\r\n              <Button\r\n                outline\r\n                color=\"success\"\r\n                onClick={() => Dispatch(getDataFromAPIForCity())}\r\n              >\r\n                Get City\r\n              </Button>\r\n            </span>\r\n            <span className=\"SecondPage-Button-newcity\">\r\n              <Button outline color=\"danger\" onClick={() => newCityClick()}>\r\n                New City\r\n              </Button>\r\n            </span>\r\n            <span className=\"SecondPage-Button-newcount\">\r\n              <Button outline color=\"success\" onClick={() => getNewCount()}>\r\n                New Count\r\n              </Button>\r\n            </span>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default SecondPage;","import React from 'react'\r\nimport {Nav,Navbar,NavItem,NavbarBrand, NavLink} from \"reactstrap\"\r\nimport { FaAnchor } from 'react-icons/fa'\r\nimport \"../cssfiles/Navi.css\"\r\n//import {Link} from \"react-router-dom\"\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n\r\nfunction Navi({history}) {\r\n\r\n  //In order to prevent page refresh, we will not use direct Link tags\r\n  //We should avoid page refreshing because of state reset.\r\n  //When page refreshes the states from reducers turns back to initial state.\r\n  //We will create function and call history.push function in them \r\n  //By these function we will implement routing\r\n  const secondpageChange=(e)=>{\r\n    e.preventDefault()\r\n   history.push(\"/secondpage\")\r\n  }\r\n\r\n  const homepageChange=(e)=>{\r\n    e.preventDefault()\r\n   history.push(\"/\")\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <Navbar color=\"warning\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">\r\n            <FaAnchor size=\"2em\" />\r\n            <span className=\"span-1\">Counter</span>\r\n          </NavbarBrand>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            <NavItem className=\"nav-item\">\r\n              <NavLink onClick={(e)=>homepageChange(e)}>\r\n              Anasayfa\r\n              </NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink onClick={(e)=>secondpageChange(e)}>\r\n              SecondPage\r\n              </NavLink>\r\n            </NavItem>\r\n          </Nav>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n}\r\n\r\n//Now we should wrap our component with an high order function called withRouter\r\n//This will enable routing without refreshing the page\r\nexport default withRouter(Navi);","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {Card, CardImg, CardBody, CardTitle, CardSubtitle, CardText } from \"reactstrap\";\r\nimport ata from \"../images/Atatürk.jpg\";\r\nimport \"../cssfiles/FirstCounterCard.css\"\r\n\r\n\r\n\r\nclass FirstCounterCard extends Component {\r\n    render() {\r\n        return (\r\n          <div>\r\n            <Card className=\".card\" style={{ width: \"20rem\" , heigth:\"25rem\"}}>\r\n              <CardImg\r\n                top\r\n                width=\"100%\"\r\n                src={ata}\r\n                alt=\"Card image cap\"\r\n              />\r\n              <CardBody>\r\n                <CardTitle className=\"cardtitle\">Amount</CardTitle>\r\n                <CardSubtitle className=\"cardsubtitle\">{this.props.counter}</CardSubtitle>\r\n                <CardText className=\"cardtext\">\r\n                  Mustafa Kemal ATATÜRK\r\n                </CardText>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { counter: state.counterReducer,}\r\n  }\r\n\r\n\r\nexport default connect(mapStateToProps, null)(FirstCounterCard)","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../cssfiles/LogInPage.css\";\r\nimport {Button, Container, Row} from \"reactstrap\";\r\nimport {logIn} from \"../redux/actions/counteractions\";\r\n\r\n\r\nclass LogInPage extends Component {\r\n\r\n    changeRoute = () => {\r\n\r\n      setTimeout(() => {\r\n        if(this.props.isLogged===true)\r\n      {this.props.history.push(\"/secondpage\")}\r\n      }, 5000);\r\n      \r\n  }\r\n  \r\n\r\n    render() {\r\n      console.log(this.props);\r\n      this.changeRoute()\r\n        return (\r\n          <div id=\"loginpage-div\" className=\"imagepage-main-div\">\r\n            <Container className=\"loginpage-container justify-content-center\">\r\n              <Row>\r\n                <h3>Please Log-in</h3>\r\n              </Row>\r\n              <Row>\r\n              <h3> {this.props.isLogged ? \"you are logged in ..redirecting to secondpage\" : \"you are logged out\"} </h3>\r\n              </Row>\r\n              <Row>\r\n                <Button color=\"success\" onClick={this.props.logIn}>Log-in</Button>\r\n              </Row>\r\n            </Container>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps={logIn: logIn};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { \r\n           isLogged: state.loginReducer\r\n}\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(LogInPage)","import React, { Component } from \"react\";\nimport Counter from \"./components/Counter\";\nimport Increaser from './components/Increaser';\nimport Decreaser from './components/Decreaser';\nimport IncreaserByTwo from './components/IncreaserByTwo';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Container,Row,Col} from \"reactstrap\";\nimport \"../src/cssfiles/App.css\";\nimport \"../src/cssfiles/Counter.css\";\nimport {Route,Switch, Redirect} from \"react-router-dom\";\nimport SecondPage from './components/SecondPage';\nimport Navi from './components/Navi';\nimport FirstCounterCard from \"./components/FirstCounterCard\";\nimport { connect } from \"react-redux\";\nimport LogInPage from \"./components/LogInPage\"\nimport { createBrowserHistory } from \"history\";\n\n\n//we will create a browser history for page routing and this will prevent the page refresh during routing\n//This history must be a global variable so we create it outside of the App component\n//Then we will pass this history variable to switch tag\n//We should avoid page refreshing because of state reset.\n//When page refreshes the states from reducers turns back to initial state.\nconst history = createBrowserHistory();\n\nclass App extends Component {\n\n  render(){\n  return (\n    <div className=\"App\" history={history}>\n      <Navi/>\n      <Container className=\"App-Container\" >\n        <Switch>\n          <Route\n          exact\n            path=\"/\"\n            render={(routeProps) => (\n              <div className=\"App-div\">\n                <Row className=\"Counter-Row justify-content-center\">\n                  <Col className=\".col-4 .col-sm-4 justify-content-center\">\n                    <FirstCounterCard className=\"FirstCounterCard\" />\n                  </Col>\n                  <Col className=\".col-8 .col-sm-4 justify-content-center\">\n                    <Counter className=\"App-Counter justify-content-center\" />\n                    <Row className=\"Buttons-Row justify-content-center\">\n                  <Increaser />\n                  <span className=\"App-Decreaser\">\n                    <Decreaser />\n                  </span>\n                  <span className=\"App-IncreaserByTwo\">\n                    <IncreaserByTwo />\n                  </span>\n                </Row>\n                  </Col>\n                </Row>\n              </div>\n            )}\n          ></Route>\n         <Route path=\"/secondpage\" className=\"App-SecondPage\" render={(routeProps)=>(\n            this.props.isLogged ? (<SecondPage {...routeProps} />) : (<Redirect {...routeProps} to=\"/loginpage\" />)\n          )} />\n          <Route exact path=\"/loginpage\" component={LogInPage}/>\n        </Switch>\n      </Container>\n    </div>\n  );\n }\n}\n\nconst mapStateToProps = (state) => {\n  return { \n           isLogged: state.loginReducer\n}\n}\n\nexport default connect(mapStateToProps, null)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState= {\r\n    amount: 0,\r\n    apiName:null,\r\n    apiCity:null,\r\n    isLoggedIn: false\r\n}","import * as actiontypes from \"../actions/actiontypes\"\r\nimport {initialState} from \"./initialState\";\r\n\r\n\r\n\r\n\r\nconst counterReducer=(state=initialState.amount,action)=>{\r\n\r\n    let newstate=state;\r\n\r\n    switch(action.type){\r\n\r\n        case actiontypes.INCREASE:\r\n            return (newstate=newstate+action.payload);\r\n        case actiontypes.DECREASE:\r\n            return (newstate=newstate-action.payload);\r\n        case actiontypes.INCREASE_BY_TWO:\r\n            return (newstate=newstate+action.payload);\r\n        default:\r\n            return state;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default counterReducer;","import * as actiontypes from \"../actions/actiontypes\";\r\nimport {initialState} from \"./initialState\";\r\n\r\n\r\n\r\nconst usersNameReducer=(state=initialState.apiName,action)=>{\r\n\r\n    if(action.type===actiontypes.GETDATA){\r\n            state=action.payload;\r\n          \r\n              return state.map((user) => {\r\n                \r\n                return user.name + \", \";\r\n              });\r\n    }\r\n    else{\r\n        return state\r\n    }\r\n\r\n}\r\n\r\nexport default usersNameReducer;","import * as actiontypes from \"../actions/actiontypes\";\r\nimport {initialState} from \"./initialState\";\r\n\r\n\r\n\r\nconst usersCityReducer=(state=initialState.apiCity,action)=>{\r\n\r\n    if (action.type === actiontypes.GETUSERCITY) {\r\n      \r\n      state= action.payload.map((user) => {\r\n        return user.address.city + \", \";\r\n      });\r\n      \r\n      return state\r\n    } else {\r\n      return state;\r\n    }\r\n\r\n}\r\n\r\nexport default usersCityReducer;","import * as actiontypes from \"../actions/actiontypes\";\r\nimport {initialState} from \"./initialState\";\r\n\r\nconst loginReducer= (state=initialState.isLoggedIn,action) => {\r\n\r\n            if(action.type===actiontypes.LOGIN){\r\n             state=action.payload;\r\n             return state;\r\n            }\r\n            else{\r\n                return state;\r\n            }\r\n          \r\n}\r\n\r\n\r\nexport default loginReducer;","import {combineReducers} from \"redux\"\r\nimport counterReducer from \"./counterReducer\"\r\nimport usersNameReducer from \"./usersNameReducer\"\r\nimport usersCityReducer from \"./usersCityReducer\"\r\nimport loginReducer from \"./loginReducer\"\r\n\r\nconst allReducers=combineReducers(\r\n    {\r\n        usersNameReducer: usersNameReducer,\r\n        counterReducer: counterReducer,\r\n        usersCityReducer: usersCityReducer,\r\n        loginReducer: loginReducer\r\n        \r\n    }\r\n)\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from \"./redux/reducers/configureStore\";\nimport {Provider} from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {BrowserRouter} from \"react-router-dom\";\n\n\n//we will create a store and pass this to provider\nexport const Store=configureStore();\nconsole.log(Store)\n//now the variable below will provide us accesibility to initialState from all components\nexport const getInitialState=Store.getState();\nconsole.log(getInitialState)\n\nReactDOM.render(\n\n    <Provider store={Store}>\n      <BrowserRouter>\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>\n      </BrowserRouter>\n   </Provider>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore,applyMiddleware } from 'redux';\r\nimport allReducers from \"./index\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\n\r\nexport default function configureStore() {\r\n\r\n    return createStore(allReducers,applyMiddleware(thunk))\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}